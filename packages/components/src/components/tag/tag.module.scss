@use '../../styles/mixins';

@mixin tag-variant($bg, $secondary-bg, $secondary-text) {
  &,
  &.tag--type-default {
    color: var(--new-color-text-inverted);
    background-color: $bg;
  }

  &.tag--type-secondary {
    color: $secondary-text;
    background-color: $secondary-bg;
  }

  &.tag--type-ghost {
    color: $bg;
    background-color: var(--new-color-bg-default);
    border: 1px solid $bg;
  }

  &.tag--type-invisible,
  &.tag--icon-only {
    padding: 0;
  }

  &.tag--type-invisible {
    color: $bg;
    background-color: var(--new-color-transparent);
    border-color: var(--new-color-transparent);
  }

  &.tag--disabled {
    opacity: 0.5;
  }
}

.tag,
.tag--default {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 1.5rem;
  height: 1.5rem;
  padding: 0.125rem 0.5rem;
  font-size: 0.875rem;
  text-align: center;
  text-decoration: none;
  white-space: nowrap;
  vertical-align: bottom; // Removes extra pixel added to height by inline-flex
  border-radius: var(--border-radius-default);

  @include mixins.print-grayscale;

  &.tag--type-ghost {
    padding: calc(0.125rem - 1px) calc(0.5rem - 1px); // padding - ghost border
  }
}

.tag--small {
  min-width: 1.3125rem;
  height: 1.3125rem;
  padding: 0;
  font-size: 0.625rem;

  &.tag--type-ghost {
    padding: 0;
  }
}

.tag--medium {
  min-width: 2.5rem;
  height: 2.5rem;
  font-size: 1rem;
}

.tag--color-default {
  @include tag-variant(var(--new-color-bg-inverted), var(--new-color-bg-muted), var(--new-color-text-subtle));
}

.tag--color-primary {
  @include tag-variant(
    var(--new-color-primary-main),
    var(--new-color-primary-highlight-subtle),
    var(--new-color-primary-main)
  );
}

.tag--color-accent,
.tag--color-primary-accent {
  @include tag-variant(var(--new-color-accent-main), var(--new-color-accent-highlight), var(--new-color-accent-main));
}

.tag--color-positive,
.tag--color-success {
  @include tag-variant(
    var(--new-color-positive-main),
    var(--new-color-positive-highlight),
    var(--new-color-positive-main)
  );
}

.tag--color-warning {
  @include tag-variant(
    var(--new-color-warning-main),
    var(--new-color-warning-highlight),
    var(--new-color-warning-main)
  );
}

.tag--color-important {
  @include tag-variant(
    var(--new-color-important-main),
    var(--new-color-important-highlight),
    var(--new-color-important-main)
  );
}

.tag--with-arrow {
  &::after {
    position: absolute;
    top: 2px;
    right: 0;
    content: '';
    border-right: 4px solid var(--new-color-transparent);
    border-bottom: 4px solid var(--new-color-bg-default);
    border-left: 4px solid var(--new-color-transparent);
    transform: rotate(45deg);
  }

  &.tag--medium::after {
    right: -1px;
    border-width: 7px;
  }
}

.tag--status-error,
.tag--status-success,
.tag--status-inactive {
  &::before {
    position: absolute;
    top: -0.125rem;
    right: -0.125rem;
    width: 0.625rem;
    height: 0.625rem;
    content: '';
    border: 1px solid var(--new-color-bg-default);
    border-radius: 50%;
  }
}

.tag--status-success::before {
  background-color: var(--new-color-positive-main);
}

.tag--status-error::before {
  background-color: var(--new-color-important-main);
}

.tag--status-inactive::before {
  background-color: var(--new-color-text-disabled);
}

.tag--rounded {
  border-radius: 100%;
}
